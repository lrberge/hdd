% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/core.R
\name{hdd_slice}
\alias{hdd_slice}
\title{Applies a function to slices of data (and save them)}
\usage{
hdd_slice(x, fun, rep, chunkMB = 500, ...)
}
\arguments{
\item{x}{A dataset (data.frame, hdd).}

\item{fun}{A function to be applied to slices of the dataset. The function must return a data frame like object.}

\item{rep}{The destination repository where the data is saved.}

\item{chunkMB}{The size of the slices, default is 500MB. That is: the function \code{fun} is applied to each 500Mb of data \code{x}. If the function creates a lot of additionnal information, you may want this number to go down. On the other hand, if the function reduces the information you may want this number to go up. In the end it will depend on the amount of memory available.}

\item{...}{Other parameters to be passed to \code{fun}.}
}
\value{
It doesn't return anything, the output is a "hard drive data" saved in the hard drive.
}
\description{
This function is useful to apply complex R functions to large datasets (out of memory). It slices the input data, applies the function, then saves each chunk into a hard drive folder. This can then be a hdd dataset.
}
\examples{

\dontrun{

# Example in the context of patent data.

# Assume you have a data set, pat_abstract, with two variables:
# - patent_id: an identification number (here a patent number)
# - abstract: the abstract of the patent
# You want to create the data set, pat_word, with three variables:
# - patent_id: same as before
# - word: a word appearing in the patent abstract
# - word_freq: the number of times the word appeared in the patent abstract

# Typically, if you have millions of patents, it will
# create a data set that won't fit in memory.
# This is what hdd_slice is for.

# Now the code:
fun = function(x){
  abstract_split = strsplit(x$abstract, " ")
  base_split = data.table(patent_id = rep(x$patent_id,
                                          lengths(abstract_split)),
                          word = unlist(abstract_split))

  res = base_split[, .(word_freq = .N), by = .(patent_id, word)]
  res
}

hdd_slice(pat_abstract, fun, "path/pat_word")

}

}
